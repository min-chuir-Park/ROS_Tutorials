# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_pkg2/MABX.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MABX(genpy.Message):
  _md5sum = "07632b991beaa96029ed1bdc9d6a0ec2"
  _type = "my_pkg2/MABX"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 BmAngDH
float32 BmAngVelDH
float32 AmAngDH
float32 AmAngVelDH
float32 BkAngDH
float32 BkAngVelDH
float32 RlAngDH
float32 RlAngVelDH
float32 PcAngDH
float32 PcAngVelDH
float32 HdAngDH
float32 HdAngVelDH
float32 YwAngDH
float32 YwAngVelDH
float32 GnssPosEast
float32 GnssPosNorth
float32 GnssPosUp
float32 GnssVelEast
float32 GnssVelNorth
float32 GnssVelUp
float32 GnssVelX
float32 BmAngleCmd
float32 BmAngleVelCmd
float32 BkAngleCmd
float32 BkAngleVelcmd
float32 AmAngleCmd
float32 AmAngleVelCmd
float32 SwAngleCmd
float32 SwAngleVelCmd
"""
  __slots__ = ['BmAngDH','BmAngVelDH','AmAngDH','AmAngVelDH','BkAngDH','BkAngVelDH','RlAngDH','RlAngVelDH','PcAngDH','PcAngVelDH','HdAngDH','HdAngVelDH','YwAngDH','YwAngVelDH','GnssPosEast','GnssPosNorth','GnssPosUp','GnssVelEast','GnssVelNorth','GnssVelUp','GnssVelX','BmAngleCmd','BmAngleVelCmd','BkAngleCmd','BkAngleVelcmd','AmAngleCmd','AmAngleVelCmd','SwAngleCmd','SwAngleVelCmd']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       BmAngDH,BmAngVelDH,AmAngDH,AmAngVelDH,BkAngDH,BkAngVelDH,RlAngDH,RlAngVelDH,PcAngDH,PcAngVelDH,HdAngDH,HdAngVelDH,YwAngDH,YwAngVelDH,GnssPosEast,GnssPosNorth,GnssPosUp,GnssVelEast,GnssVelNorth,GnssVelUp,GnssVelX,BmAngleCmd,BmAngleVelCmd,BkAngleCmd,BkAngleVelcmd,AmAngleCmd,AmAngleVelCmd,SwAngleCmd,SwAngleVelCmd

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MABX, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.BmAngDH is None:
        self.BmAngDH = 0.
      if self.BmAngVelDH is None:
        self.BmAngVelDH = 0.
      if self.AmAngDH is None:
        self.AmAngDH = 0.
      if self.AmAngVelDH is None:
        self.AmAngVelDH = 0.
      if self.BkAngDH is None:
        self.BkAngDH = 0.
      if self.BkAngVelDH is None:
        self.BkAngVelDH = 0.
      if self.RlAngDH is None:
        self.RlAngDH = 0.
      if self.RlAngVelDH is None:
        self.RlAngVelDH = 0.
      if self.PcAngDH is None:
        self.PcAngDH = 0.
      if self.PcAngVelDH is None:
        self.PcAngVelDH = 0.
      if self.HdAngDH is None:
        self.HdAngDH = 0.
      if self.HdAngVelDH is None:
        self.HdAngVelDH = 0.
      if self.YwAngDH is None:
        self.YwAngDH = 0.
      if self.YwAngVelDH is None:
        self.YwAngVelDH = 0.
      if self.GnssPosEast is None:
        self.GnssPosEast = 0.
      if self.GnssPosNorth is None:
        self.GnssPosNorth = 0.
      if self.GnssPosUp is None:
        self.GnssPosUp = 0.
      if self.GnssVelEast is None:
        self.GnssVelEast = 0.
      if self.GnssVelNorth is None:
        self.GnssVelNorth = 0.
      if self.GnssVelUp is None:
        self.GnssVelUp = 0.
      if self.GnssVelX is None:
        self.GnssVelX = 0.
      if self.BmAngleCmd is None:
        self.BmAngleCmd = 0.
      if self.BmAngleVelCmd is None:
        self.BmAngleVelCmd = 0.
      if self.BkAngleCmd is None:
        self.BkAngleCmd = 0.
      if self.BkAngleVelcmd is None:
        self.BkAngleVelcmd = 0.
      if self.AmAngleCmd is None:
        self.AmAngleCmd = 0.
      if self.AmAngleVelCmd is None:
        self.AmAngleVelCmd = 0.
      if self.SwAngleCmd is None:
        self.SwAngleCmd = 0.
      if self.SwAngleVelCmd is None:
        self.SwAngleVelCmd = 0.
    else:
      self.BmAngDH = 0.
      self.BmAngVelDH = 0.
      self.AmAngDH = 0.
      self.AmAngVelDH = 0.
      self.BkAngDH = 0.
      self.BkAngVelDH = 0.
      self.RlAngDH = 0.
      self.RlAngVelDH = 0.
      self.PcAngDH = 0.
      self.PcAngVelDH = 0.
      self.HdAngDH = 0.
      self.HdAngVelDH = 0.
      self.YwAngDH = 0.
      self.YwAngVelDH = 0.
      self.GnssPosEast = 0.
      self.GnssPosNorth = 0.
      self.GnssPosUp = 0.
      self.GnssVelEast = 0.
      self.GnssVelNorth = 0.
      self.GnssVelUp = 0.
      self.GnssVelX = 0.
      self.BmAngleCmd = 0.
      self.BmAngleVelCmd = 0.
      self.BkAngleCmd = 0.
      self.BkAngleVelcmd = 0.
      self.AmAngleCmd = 0.
      self.AmAngleVelCmd = 0.
      self.SwAngleCmd = 0.
      self.SwAngleVelCmd = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_29f().pack(_x.BmAngDH, _x.BmAngVelDH, _x.AmAngDH, _x.AmAngVelDH, _x.BkAngDH, _x.BkAngVelDH, _x.RlAngDH, _x.RlAngVelDH, _x.PcAngDH, _x.PcAngVelDH, _x.HdAngDH, _x.HdAngVelDH, _x.YwAngDH, _x.YwAngVelDH, _x.GnssPosEast, _x.GnssPosNorth, _x.GnssPosUp, _x.GnssVelEast, _x.GnssVelNorth, _x.GnssVelUp, _x.GnssVelX, _x.BmAngleCmd, _x.BmAngleVelCmd, _x.BkAngleCmd, _x.BkAngleVelcmd, _x.AmAngleCmd, _x.AmAngleVelCmd, _x.SwAngleCmd, _x.SwAngleVelCmd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 116
      (_x.BmAngDH, _x.BmAngVelDH, _x.AmAngDH, _x.AmAngVelDH, _x.BkAngDH, _x.BkAngVelDH, _x.RlAngDH, _x.RlAngVelDH, _x.PcAngDH, _x.PcAngVelDH, _x.HdAngDH, _x.HdAngVelDH, _x.YwAngDH, _x.YwAngVelDH, _x.GnssPosEast, _x.GnssPosNorth, _x.GnssPosUp, _x.GnssVelEast, _x.GnssVelNorth, _x.GnssVelUp, _x.GnssVelX, _x.BmAngleCmd, _x.BmAngleVelCmd, _x.BkAngleCmd, _x.BkAngleVelcmd, _x.AmAngleCmd, _x.AmAngleVelCmd, _x.SwAngleCmd, _x.SwAngleVelCmd,) = _get_struct_29f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_29f().pack(_x.BmAngDH, _x.BmAngVelDH, _x.AmAngDH, _x.AmAngVelDH, _x.BkAngDH, _x.BkAngVelDH, _x.RlAngDH, _x.RlAngVelDH, _x.PcAngDH, _x.PcAngVelDH, _x.HdAngDH, _x.HdAngVelDH, _x.YwAngDH, _x.YwAngVelDH, _x.GnssPosEast, _x.GnssPosNorth, _x.GnssPosUp, _x.GnssVelEast, _x.GnssVelNorth, _x.GnssVelUp, _x.GnssVelX, _x.BmAngleCmd, _x.BmAngleVelCmd, _x.BkAngleCmd, _x.BkAngleVelcmd, _x.AmAngleCmd, _x.AmAngleVelCmd, _x.SwAngleCmd, _x.SwAngleVelCmd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 116
      (_x.BmAngDH, _x.BmAngVelDH, _x.AmAngDH, _x.AmAngVelDH, _x.BkAngDH, _x.BkAngVelDH, _x.RlAngDH, _x.RlAngVelDH, _x.PcAngDH, _x.PcAngVelDH, _x.HdAngDH, _x.HdAngVelDH, _x.YwAngDH, _x.YwAngVelDH, _x.GnssPosEast, _x.GnssPosNorth, _x.GnssPosUp, _x.GnssVelEast, _x.GnssVelNorth, _x.GnssVelUp, _x.GnssVelX, _x.BmAngleCmd, _x.BmAngleVelCmd, _x.BkAngleCmd, _x.BkAngleVelcmd, _x.AmAngleCmd, _x.AmAngleVelCmd, _x.SwAngleCmd, _x.SwAngleVelCmd,) = _get_struct_29f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_29f = None
def _get_struct_29f():
    global _struct_29f
    if _struct_29f is None:
        _struct_29f = struct.Struct("<29f")
    return _struct_29f
