// Generated by gencpp from file my_pkg2/MABX.msg
// DO NOT EDIT!


#ifndef MY_PKG2_MESSAGE_MABX_H
#define MY_PKG2_MESSAGE_MABX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_pkg2
{
template <class ContainerAllocator>
struct MABX_
{
  typedef MABX_<ContainerAllocator> Type;

  MABX_()
    : BmAngDH(0.0)
    , BmAngVelDH(0.0)
    , AmAngDH(0.0)
    , AmAngVelDH(0.0)
    , BkAngDH(0.0)
    , BkAngVelDH(0.0)
    , RlAngDH(0.0)
    , RlAngVelDH(0.0)
    , PcAngDH(0.0)
    , PcAngVelDH(0.0)
    , HdAngDH(0.0)
    , HdAngVelDH(0.0)
    , YwAngDH(0.0)
    , YwAngVelDH(0.0)
    , GnssPosEast(0.0)
    , GnssPosNorth(0.0)
    , GnssPosUp(0.0)
    , GnssVelEast(0.0)
    , GnssVelNorth(0.0)
    , GnssVelUp(0.0)
    , GnssVelX(0.0)
    , BmAngleCmd(0.0)
    , BmAngleVelCmd(0.0)
    , BkAngleCmd(0.0)
    , BkAngleVelcmd(0.0)
    , AmAngleCmd(0.0)
    , AmAngleVelCmd(0.0)
    , SwAngleCmd(0.0)
    , SwAngleVelCmd(0.0)  {
    }
  MABX_(const ContainerAllocator& _alloc)
    : BmAngDH(0.0)
    , BmAngVelDH(0.0)
    , AmAngDH(0.0)
    , AmAngVelDH(0.0)
    , BkAngDH(0.0)
    , BkAngVelDH(0.0)
    , RlAngDH(0.0)
    , RlAngVelDH(0.0)
    , PcAngDH(0.0)
    , PcAngVelDH(0.0)
    , HdAngDH(0.0)
    , HdAngVelDH(0.0)
    , YwAngDH(0.0)
    , YwAngVelDH(0.0)
    , GnssPosEast(0.0)
    , GnssPosNorth(0.0)
    , GnssPosUp(0.0)
    , GnssVelEast(0.0)
    , GnssVelNorth(0.0)
    , GnssVelUp(0.0)
    , GnssVelX(0.0)
    , BmAngleCmd(0.0)
    , BmAngleVelCmd(0.0)
    , BkAngleCmd(0.0)
    , BkAngleVelcmd(0.0)
    , AmAngleCmd(0.0)
    , AmAngleVelCmd(0.0)
    , SwAngleCmd(0.0)
    , SwAngleVelCmd(0.0)  {
  (void)_alloc;
    }



   typedef float _BmAngDH_type;
  _BmAngDH_type BmAngDH;

   typedef float _BmAngVelDH_type;
  _BmAngVelDH_type BmAngVelDH;

   typedef float _AmAngDH_type;
  _AmAngDH_type AmAngDH;

   typedef float _AmAngVelDH_type;
  _AmAngVelDH_type AmAngVelDH;

   typedef float _BkAngDH_type;
  _BkAngDH_type BkAngDH;

   typedef float _BkAngVelDH_type;
  _BkAngVelDH_type BkAngVelDH;

   typedef float _RlAngDH_type;
  _RlAngDH_type RlAngDH;

   typedef float _RlAngVelDH_type;
  _RlAngVelDH_type RlAngVelDH;

   typedef float _PcAngDH_type;
  _PcAngDH_type PcAngDH;

   typedef float _PcAngVelDH_type;
  _PcAngVelDH_type PcAngVelDH;

   typedef float _HdAngDH_type;
  _HdAngDH_type HdAngDH;

   typedef float _HdAngVelDH_type;
  _HdAngVelDH_type HdAngVelDH;

   typedef float _YwAngDH_type;
  _YwAngDH_type YwAngDH;

   typedef float _YwAngVelDH_type;
  _YwAngVelDH_type YwAngVelDH;

   typedef float _GnssPosEast_type;
  _GnssPosEast_type GnssPosEast;

   typedef float _GnssPosNorth_type;
  _GnssPosNorth_type GnssPosNorth;

   typedef float _GnssPosUp_type;
  _GnssPosUp_type GnssPosUp;

   typedef float _GnssVelEast_type;
  _GnssVelEast_type GnssVelEast;

   typedef float _GnssVelNorth_type;
  _GnssVelNorth_type GnssVelNorth;

   typedef float _GnssVelUp_type;
  _GnssVelUp_type GnssVelUp;

   typedef float _GnssVelX_type;
  _GnssVelX_type GnssVelX;

   typedef float _BmAngleCmd_type;
  _BmAngleCmd_type BmAngleCmd;

   typedef float _BmAngleVelCmd_type;
  _BmAngleVelCmd_type BmAngleVelCmd;

   typedef float _BkAngleCmd_type;
  _BkAngleCmd_type BkAngleCmd;

   typedef float _BkAngleVelcmd_type;
  _BkAngleVelcmd_type BkAngleVelcmd;

   typedef float _AmAngleCmd_type;
  _AmAngleCmd_type AmAngleCmd;

   typedef float _AmAngleVelCmd_type;
  _AmAngleVelCmd_type AmAngleVelCmd;

   typedef float _SwAngleCmd_type;
  _SwAngleCmd_type SwAngleCmd;

   typedef float _SwAngleVelCmd_type;
  _SwAngleVelCmd_type SwAngleVelCmd;





  typedef boost::shared_ptr< ::my_pkg2::MABX_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_pkg2::MABX_<ContainerAllocator> const> ConstPtr;

}; // struct MABX_

typedef ::my_pkg2::MABX_<std::allocator<void> > MABX;

typedef boost::shared_ptr< ::my_pkg2::MABX > MABXPtr;
typedef boost::shared_ptr< ::my_pkg2::MABX const> MABXConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_pkg2::MABX_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_pkg2::MABX_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace my_pkg2

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'my_pkg2': ['/home/nvidia/ROS_Tutorials/catkin_ws/src/ros_python/package_ws/launch_generation/my_pkg2/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::my_pkg2::MABX_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_pkg2::MABX_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_pkg2::MABX_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_pkg2::MABX_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_pkg2::MABX_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_pkg2::MABX_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_pkg2::MABX_<ContainerAllocator> >
{
  static const char* value()
  {
    return "07632b991beaa96029ed1bdc9d6a0ec2";
  }

  static const char* value(const ::my_pkg2::MABX_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x07632b991beaa960ULL;
  static const uint64_t static_value2 = 0x29ed1bdc9d6a0ec2ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_pkg2::MABX_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_pkg2/MABX";
  }

  static const char* value(const ::my_pkg2::MABX_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_pkg2::MABX_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 BmAngDH\n\
float32 BmAngVelDH\n\
float32 AmAngDH\n\
float32 AmAngVelDH\n\
float32 BkAngDH\n\
float32 BkAngVelDH\n\
float32 RlAngDH\n\
float32 RlAngVelDH\n\
float32 PcAngDH\n\
float32 PcAngVelDH\n\
float32 HdAngDH\n\
float32 HdAngVelDH\n\
float32 YwAngDH\n\
float32 YwAngVelDH\n\
float32 GnssPosEast\n\
float32 GnssPosNorth\n\
float32 GnssPosUp\n\
float32 GnssVelEast\n\
float32 GnssVelNorth\n\
float32 GnssVelUp\n\
float32 GnssVelX\n\
float32 BmAngleCmd\n\
float32 BmAngleVelCmd\n\
float32 BkAngleCmd\n\
float32 BkAngleVelcmd\n\
float32 AmAngleCmd\n\
float32 AmAngleVelCmd\n\
float32 SwAngleCmd\n\
float32 SwAngleVelCmd\n\
";
  }

  static const char* value(const ::my_pkg2::MABX_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_pkg2::MABX_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.BmAngDH);
      stream.next(m.BmAngVelDH);
      stream.next(m.AmAngDH);
      stream.next(m.AmAngVelDH);
      stream.next(m.BkAngDH);
      stream.next(m.BkAngVelDH);
      stream.next(m.RlAngDH);
      stream.next(m.RlAngVelDH);
      stream.next(m.PcAngDH);
      stream.next(m.PcAngVelDH);
      stream.next(m.HdAngDH);
      stream.next(m.HdAngVelDH);
      stream.next(m.YwAngDH);
      stream.next(m.YwAngVelDH);
      stream.next(m.GnssPosEast);
      stream.next(m.GnssPosNorth);
      stream.next(m.GnssPosUp);
      stream.next(m.GnssVelEast);
      stream.next(m.GnssVelNorth);
      stream.next(m.GnssVelUp);
      stream.next(m.GnssVelX);
      stream.next(m.BmAngleCmd);
      stream.next(m.BmAngleVelCmd);
      stream.next(m.BkAngleCmd);
      stream.next(m.BkAngleVelcmd);
      stream.next(m.AmAngleCmd);
      stream.next(m.AmAngleVelCmd);
      stream.next(m.SwAngleCmd);
      stream.next(m.SwAngleVelCmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MABX_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_pkg2::MABX_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_pkg2::MABX_<ContainerAllocator>& v)
  {
    s << indent << "BmAngDH: ";
    Printer<float>::stream(s, indent + "  ", v.BmAngDH);
    s << indent << "BmAngVelDH: ";
    Printer<float>::stream(s, indent + "  ", v.BmAngVelDH);
    s << indent << "AmAngDH: ";
    Printer<float>::stream(s, indent + "  ", v.AmAngDH);
    s << indent << "AmAngVelDH: ";
    Printer<float>::stream(s, indent + "  ", v.AmAngVelDH);
    s << indent << "BkAngDH: ";
    Printer<float>::stream(s, indent + "  ", v.BkAngDH);
    s << indent << "BkAngVelDH: ";
    Printer<float>::stream(s, indent + "  ", v.BkAngVelDH);
    s << indent << "RlAngDH: ";
    Printer<float>::stream(s, indent + "  ", v.RlAngDH);
    s << indent << "RlAngVelDH: ";
    Printer<float>::stream(s, indent + "  ", v.RlAngVelDH);
    s << indent << "PcAngDH: ";
    Printer<float>::stream(s, indent + "  ", v.PcAngDH);
    s << indent << "PcAngVelDH: ";
    Printer<float>::stream(s, indent + "  ", v.PcAngVelDH);
    s << indent << "HdAngDH: ";
    Printer<float>::stream(s, indent + "  ", v.HdAngDH);
    s << indent << "HdAngVelDH: ";
    Printer<float>::stream(s, indent + "  ", v.HdAngVelDH);
    s << indent << "YwAngDH: ";
    Printer<float>::stream(s, indent + "  ", v.YwAngDH);
    s << indent << "YwAngVelDH: ";
    Printer<float>::stream(s, indent + "  ", v.YwAngVelDH);
    s << indent << "GnssPosEast: ";
    Printer<float>::stream(s, indent + "  ", v.GnssPosEast);
    s << indent << "GnssPosNorth: ";
    Printer<float>::stream(s, indent + "  ", v.GnssPosNorth);
    s << indent << "GnssPosUp: ";
    Printer<float>::stream(s, indent + "  ", v.GnssPosUp);
    s << indent << "GnssVelEast: ";
    Printer<float>::stream(s, indent + "  ", v.GnssVelEast);
    s << indent << "GnssVelNorth: ";
    Printer<float>::stream(s, indent + "  ", v.GnssVelNorth);
    s << indent << "GnssVelUp: ";
    Printer<float>::stream(s, indent + "  ", v.GnssVelUp);
    s << indent << "GnssVelX: ";
    Printer<float>::stream(s, indent + "  ", v.GnssVelX);
    s << indent << "BmAngleCmd: ";
    Printer<float>::stream(s, indent + "  ", v.BmAngleCmd);
    s << indent << "BmAngleVelCmd: ";
    Printer<float>::stream(s, indent + "  ", v.BmAngleVelCmd);
    s << indent << "BkAngleCmd: ";
    Printer<float>::stream(s, indent + "  ", v.BkAngleCmd);
    s << indent << "BkAngleVelcmd: ";
    Printer<float>::stream(s, indent + "  ", v.BkAngleVelcmd);
    s << indent << "AmAngleCmd: ";
    Printer<float>::stream(s, indent + "  ", v.AmAngleCmd);
    s << indent << "AmAngleVelCmd: ";
    Printer<float>::stream(s, indent + "  ", v.AmAngleVelCmd);
    s << indent << "SwAngleCmd: ";
    Printer<float>::stream(s, indent + "  ", v.SwAngleCmd);
    s << indent << "SwAngleVelCmd: ";
    Printer<float>::stream(s, indent + "  ", v.SwAngleVelCmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_PKG2_MESSAGE_MABX_H
