// Generated by gencpp from file service2/MoveTaskRequest.msg
// DO NOT EDIT!


#ifndef SERVICE2_MESSAGE_MOVETASKREQUEST_H
#define SERVICE2_MESSAGE_MOVETASKREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Polygon.h>

namespace service2
{
template <class ContainerAllocator>
struct MoveTaskRequest_
{
  typedef MoveTaskRequest_<ContainerAllocator> Type;

  MoveTaskRequest_()
    : id(0)
    , destination()
    , way_points()
    , boundary()  {
    }
  MoveTaskRequest_(const ContainerAllocator& _alloc)
    : id(0)
    , destination(_alloc)
    , way_points(_alloc)
    , boundary(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _id_type;
  _id_type id;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _destination_type;
  _destination_type destination;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _way_points_type;
  _way_points_type way_points;

   typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _boundary_type;
  _boundary_type boundary;





  typedef boost::shared_ptr< ::service2::MoveTaskRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::service2::MoveTaskRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MoveTaskRequest_

typedef ::service2::MoveTaskRequest_<std::allocator<void> > MoveTaskRequest;

typedef boost::shared_ptr< ::service2::MoveTaskRequest > MoveTaskRequestPtr;
typedef boost::shared_ptr< ::service2::MoveTaskRequest const> MoveTaskRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::service2::MoveTaskRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::service2::MoveTaskRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace service2

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::service2::MoveTaskRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::service2::MoveTaskRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::service2::MoveTaskRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::service2::MoveTaskRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::service2::MoveTaskRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::service2::MoveTaskRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::service2::MoveTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2062e5de8bc04084208926ea28d5fbb5";
  }

  static const char* value(const ::service2::MoveTaskRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2062e5de8bc04084ULL;
  static const uint64_t static_value2 = 0x208926ea28d5fbb5ULL;
};

template<class ContainerAllocator>
struct DataType< ::service2::MoveTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "service2/MoveTaskRequest";
  }

  static const char* value(const ::service2::MoveTaskRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::service2::MoveTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 id\n\
geometry_msgs/Pose destination\n\
geometry_msgs/Point[] way_points\n\
geometry_msgs/Polygon boundary\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Polygon\n\
#A specification of a polygon where the first and last points are assumed to be connected\n\
Point32[] points\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::service2::MoveTaskRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::service2::MoveTaskRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.destination);
      stream.next(m.way_points);
      stream.next(m.boundary);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveTaskRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::service2::MoveTaskRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::service2::MoveTaskRequest_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "destination: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.destination);
    s << indent << "way_points[]" << std::endl;
    for (size_t i = 0; i < v.way_points.size(); ++i)
    {
      s << indent << "  way_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.way_points[i]);
    }
    s << indent << "boundary: ";
    s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.boundary);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERVICE2_MESSAGE_MOVETASKREQUEST_H
